AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Billing Alerts for your AWS sandbox, crates 2 cfn stacks via 2 lambda functions to stop Or delete resources. 

Parameters:
  Email:
    Type: String
    Default: dst-student@datascientest.com
    Description: The Datascientest admin email address to receive alerts per email
  EmailStudent:
    Type: String
    Default: dst-student@datascientest.com
    Description: The Student email address to receive alerts per email
  WarningLevel:
    Type: String
    Default: "150"
    Description: The Warning level of Billing alarm, this would trigger the freeze CodePipeline process
  CriticalLevel:
    Type: String
    Default: "200"
    Description: The Critical level of Billing alarm, this would trigger the nuke CodePipeline process
  S3BucketName:
    Type: String
    Default: "cf-template-datascientest-sandboxes"
    Description: Provide a unique name for the S3 Bucket that will contains the Cloudformation templates for the sandbox management.
  GITHUBToken:
    Type: String
    Default: "*****************"
    Description: Provide a valid GithubToken to fetch templates

Resources:
  # Alert for the warning level: Freeze the resources
  BillingAlert:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref MySnsTopic
      AlarmDescription:
        !Join [
          "",
          [Alert for $,  !Ref WarningLevel ],
        ]
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Currency
          Value: USD
      EvaluationPeriods: 1
      MetricName: EstimatedCharges
      Namespace: AWS/Billing
      Period: 21600
      TreatMissingData: ignore
      Statistic: Maximum
      Threshold:  !Ref WarningLevel 

  # Alert for the Critical level: Delete all the resources
  BillingNukeAlert:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref MyNukeTopic
      AlarmDescription:
        !Join [
          "",
          [Alert for $,  !Ref CriticalLevel],
        ]
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Currency
          Value: USD
      EvaluationPeriods: 1
      MetricName: EstimatedCharges
      Namespace: AWS/Billing
      Period: 21600
      TreatMissingData: ignore
      Statistic: Maximum
      Threshold:  !Ref CriticalLevel 

  # Define the SNS topic for warning billing 
  MySnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Tags: 
        - Key: "management"
          Value: "student" 
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt TopicConsumerFunction1.Arn   

  # Define the SNS topic for critical billing
  MyNukeTopic:
    Type: AWS::SNS::Topic
    Properties:
      Tags: 
        - Key: "management"
          Value: "student" 
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt TopicConsumerNuke.Arn  

  # Provide permission for SNS to invoke the Lambda function
  TopicConsumerNukePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref TopicConsumerNuke
      Principal: sns.amazonaws.com

  # Define the consumer Lambda function for Nuke
  TopicConsumerNuke:
    Type: 'AWS::Lambda::Function'
    Properties:
      Tags: 
        - Key: "management"
          Value: "student" 
      Handler: index.handler
      Role: !GetAtt LambdaFunctionRole.Arn
      Runtime: provided
      Timeout: 60
      Layers: ["arn:aws:lambda:eu-west-3:744348701589:layer:bash:8"]
      MemorySize: 2048
      Environment:
        Variables:
          GITHUBToken:
            Ref: GITHUBToken
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: nuke.zip

  # Provide permission for SNS to invoke the Lambda function
  TopicConsumerFunction1Permission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref TopicConsumerFunction1
      Principal: sns.amazonaws.com

  # Define the consumer Lambda function for warning freeze resources
  TopicConsumerFunction1:
    Type: 'AWS::Lambda::Function'
    Properties:
      Tags: 
        - Key: "management"
          Value: "student" 
      Handler: index.handler
      Role: !GetAtt LambdaFunctionRole.Arn
      Runtime: provided
      Timeout: 60
      Layers: ["arn:aws:lambda:eu-west-3:744348701589:layer:bash:8"]
      MemorySize: 2048
      Environment:
        Variables:
          GITHUBToken:
            Ref: GITHUBToken
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: custom.zip

  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Tags: 
        - Key: "management"
          Value: "student" 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Path: "/"
      Policies:
      - PolicyName: SandboxLambdaPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: "Allow"
            Action: "*"
            Resource: "*"
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - codepipeline:*
            - sts:*
            - kms:*
            Resource: "*"
          - Effect: Allow
            Action:
            - 'sns:Subscribe'
            - 'sns:Receive'
            - 'sns:Unsubscribe'
            Resource: "*"

# SNS Topics and Subscriptions for Notification
  BillingEmailAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      Tags: 
        - Key: "management"
          Value: "student" 

  AlarmSubscriberAdminEmail:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref Email
      Protocol: email
      TopicArn: !Ref BillingEmailAlertTopic

  AlarmSubscriberStudentEmail:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref EmailStudent
      Protocol: email
      TopicArn: !Ref BillingEmailAlertTopic

Outputs:
  TopicConsumerFunction1Name:
    Description: TopicConsumerFunction1 function name
    Value: !Ref TopicConsumerFunction1
  
  SNStopicName:
    Description: SNS topic name
    Value: !GetAtt MySnsTopic.TopicName

  SNStopicARN:
    Description: SNS topic ARN
    Value: !Ref MySnsTopic
